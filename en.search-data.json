{"/docs/":{"data":{"":"quic-go is an implementation of the QUIC protocol (RFC 9000, RFC 9001, RFC 9002) in Go. It has support for HTTP/3 (RFC 9114), including QPACK (RFC 9204).\nIn addition to these base RFCs, it also implements the following RFCs:\nUnreliable Datagram Extension (RFC 9221) Datagram Packetization Layer Path MTU Discovery (DPLPMTUD, RFC 8899) QUIC Version 2 (RFC 9369) QUIC Event Logging using qlog (draft-ietf-quic-qlog-main-schema and draft-ietf-quic-qlog-quic-events) Support for WebTransport over HTTP/3 (draft-ietf-webtrans-http3) is implemented in webtransport-go."},"title":"Docs"},"/docs/quic/client/":{"data":{"":"Since QUIC uses connection IDs to demultiplex connections, multiple outgoing connections can share a single UDP socket.\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second) // 3s handshake timeout defer cancel() conn, err := tr.Dial(ctx, \u003cserver address\u003e, \u003ctls.Config\u003e, \u003cquic.Config\u003e) // ... error handling As a shortcut, quic.Dial and quic.DialAddr can be used without explictly initializing a quic.Transport:\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second) // 3s handshake timeout defer cancel() conn, err := quic.Dial(ctx, conn, \u003cserver address\u003e, \u003ctls.Config\u003e, \u003cquic.Config\u003e) Just as we saw before when used a similar shortcut to run a server, it’s also not possible to reuse the same UDP socket for other outgoing connections, or to listen for incoming connections."},"title":"Running a QUIC Client"},"/docs/quic/connection/":{"data":{"":"","when-the-remote-peer-closes-the-connection#When the Remote Peer closes the Connection":"In case the peer closes the QUIC connection, all calls to open streams, accept streams, as well as all methods on streams immediately return an error. Additionally, it is set as cancellation cause of the connection context. Users can use errors assertions to find out what exactly went wrong:\nquic.VersionNegotiationError: Happens during the handshake, if there is no overlap between our and the remote’s supported QUIC versions. quic.HandshakeTimeoutError: Happens if the QUIC handshake doesn’t complete within the time specified in quic.Config.HandshakeTimeout. quic.IdleTimeoutError: Happens after completion of the handshake if the connection is idle for longer than the minimum of both peers idle timeouts (as configured by quic.Config.IdleTimeout). The connection is considered idle when no stream data (and datagrams, if applicable) are exchanged for that period. The QUIC connection can be instructed to regularly send a packet to prevent a connection from going idle by setting quic.Config.KeepAlive. However, this is no guarantee that the peer doesn’t suddenly go away (e.g. by abruptly shutting down the node or by crashing), or by a NAT binding expiring, in which case this error might still occur. quic.StatelessResetError: Happens when the remote peer lost the state required to decrypt the packet. This requires the quic.Transport.StatelessResetToken to be configured by the peer. quic.TransportError: Happens if when the QUIC protocol is violated. Unless the error code is APPLICATION_ERROR, this will not happen unless one of the QUIC stacks involved is misbehaving. Please open an issue if you encounter this error. quic.ApplicationError: Happens when the remote decides to close the connection, see below. ","when-we-close-the-connection#When we close the Connection":"A quic.Connection can be closed using CloseWithError:\nconn.CloseWithError(0x42, \"error 0x42 occurred\") Applications can transmit both an error code (an unsigned 62-bit number) as well as a UTF-8 encoded human-readable reason. The error code allows the receiver to learn why the connection was closed, and the reason can be useful for debugging purposes.\nOn the receiver side, this is surfaced as a quic.ApplicationError."},"title":"Closing a Connection"},"/docs/quic/datagrams/":{"data":{"":"Unreliable datagrams are a QUIC extension (RFC 9221) that is negotiated during the handshake. Support can be enabled by setting the quic.Config.EnableDatagram flag. Note that this doesn’t guarantee that the peer also supports datagrams. Whether or not the feature negotiation succeeded can be learned from the quic.ConnectionState.SupportsDatagrams obtained from quic.Connection.ConnectionState().\nQUIC DATAGRAMs are a new QUIC frame type sent in QUIC 1-RTT packets (i.e. after completion of the handshake). Therefore, they’re end-to-end encrypted and congestion-controlled. However, if a DATAGRAM frame is deemed lost by QUIC’s loss detection mechanism, they are not retransmitted.\nDatagrams are sent using the SendDatagram method on the quic.Connection:\nconn.SendDatagram([]byte(\"foobar\")) And received using ReceiveDatagram:\nmsg, err := conn.ReceiveDatagram(context.Background()) Note that this code path is currently not optimized. It works for datagrams that are sent occasionally, but it doesn’t achieve the same throughput as writing data on a stream. Please get in touch on issue #3766 if your use case relies on high datagram throughput, or if you’d like to help fix this issue."},"title":"Datagrams"},"/docs/quic/qlog/":{"data":{"":"quic-go logs a wide range of events defined in draft-ietf-quic-qlog-quic-events, providing comprehensive insights in the internals of a QUIC connection.\nqlog files can be processed by a number of 3rd-party tools. qviz has proven very useful for debugging all kinds of QUIC connection failures.\nqlog can be activated by setting the Tracer callback on the Config. It is called as soon as quic-go decides to start the QUIC handshake on a new connection. qlog.DefaultTracer provides a tracer implementation which writes qlog files to a directory specified by the QLOGDIR environment variable, if set. The default qlog tracer can be used like this:\nquic.Config{ Tracer: qlog.DefaultTracer, } "},"title":"Event Logging using qlog"},"/docs/quic/server/":{"data":{"":"The central entry point is the quic.Transport. A Transport manages QUIC connections running on a single UDP socket. Since QUIC uses Connection IDs, it can demultiplex a listener (accepting incoming connections) and an arbitrary number of outgoing QUIC connections on the same UDP socket.\nudpConn, err := net.ListenUDP(\"udp4\", \u0026net.UDPAddr{Port: 1234}) // ... error handling tr := quic.Transport{ Conn: udpConn, } ln, err := tr.Listen(tlsConf, quicConf) // ... error handling go func() { for { conn, err := ln.Accept() // ... error handling // handle the connection, usually in a new Go routine } }() The listener ln can now be used to accept incoming QUIC connections by (repeatedly) calling the Accept method (see below for more information on the quic.Connection).\nAs a shortcut, quic.Listen and quic.ListenAddr can be used without explicitly initializing a quic.Transport:\nln, err := quic.Listen(udpConn, tlsConf, quicConf) When using the shortcut, it’s not possible to reuse the same UDP socket for outgoing connections."},"title":"Running a QUIC Server"},"/docs/quic/streams/":{"data":{"":"","accepting-streams#Accepting Streams":"QUIC is a stream-multiplexed transport. A quic.Connection fundamentally differs from the net.Conn and the net.PacketConn interface defined in the standard library. Data is sent and received on (unidirectional and bidirectional) streams (and, if supported, in datagrams), not on the connection itself. The stream state machine is described in detail in Section 3 of RFC 9000.\nNote: A unidirectional stream is a stream that the initiator can only write to (quic.SendStream), and the receiver can only read from (quic.ReceiveStream). A bidirectional stream (quic.Stream) allows reading from and writing to for both sides.\nOn the receiver side, streams are accepted using the AcceptStream (for bidirectional) and AcceptUniStream functions. For most user cases, it makes sense to call these functions in a loop:\nfor { str, err := conn.AcceptStream(context.Background()) // for bidirectional streams // ... error handling // handle the stream, usually in a new Go routine } These functions return an error when the underlying QUIC connection is closed.","opening-streams#Opening Streams":"There are two slightly different ways to open streams, one synchronous and one (potentially) asynchronous. This API is necessary since the receiver grants us a certain number of streams that we’re allowed to open. It may grant us additional streams later on (typically when existing streams are closed), but it means that at the time we want to open a new stream, we might not be able to do so.\nUsing the synchronous method OpenStreamSync for bidirectional streams, and OpenUniStreamSync for unidirectional streams, an application can block until the peer allows opening additional streams. In case that we’re allowed to open a new stream, these methods return right away:\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second) defer cancel() str, err := conn.OpenStreamSync(ctx) // wait up to 5s to open a new bidirectional stream The asynchronous version never blocks. If it’s currently not possible to open a new stream, it returns a net.Error timeout error:\nstr, err := conn.OpenStream() if nerr, ok := err.(net.Error); ok \u0026\u0026 nerr.Timeout() { // It's currently not possible to open another stream, // but it might be possible later, once the peer allowed us to do so. } These functions return an error when the underlying QUIC connection is closed.","reading-writing-closing-and-resetting#Reading, Writing, Closing and Resetting":"Using QUIC streams is pretty straightforward. The quic.ReceiveStream implements the io.Reader interface, and the quic.SendStream implements the io.Writer interface. A bidirectional stream (quic.Stream) implements both these interfaces. Conceptually, a bidirectional stream can be thought of as the composition of two unidirectional streams in opposite directions.\nCalling Close on a quic.SendStream or a quic.Stream closes the send side of the stream. On the receiver side, this will be surfaced as an io.EOF returned from the io.Reader once all data has been consumed. Note that for bidirectional streams, Close only closes the send side of the stream. It is still possible to read from the stream until the peer closes or resets the stream.\nIn case the application wishes to abort sending on a quic.SendStream or a quic.Stream , it can reset the send side by calling CancelWrite with an application-defined error code (an unsigned 62-bit number). On the receiver side, this surfaced as a quic.StreamError containing that error code on the io.Reader. Note that for bidirectional streams, CancelWrite only resets the send side of the stream. It is still possible to read from the stream until the peer closes or resets the stream.\nConversely, in case the application wishes to abort receiving from a quic.ReceiveStream or a quic.Stream, it can ask the sender to abort data transmission by calling CancelRead with an application-defined error code (an unsigned 62-bit number). On the receiver side, this surfaced as a quic.StreamError containing that error code on the io.Writer. Note that for bidirectional streams, CancelWrite only resets the receive side of the stream. It is still possible to write to the stream.\nA bidirectional stream is only closed once both the read and the write side of the stream have been either closed or reset. Only then the peer is granted a new stream according to the maximum number of concurrent streams configured via quic.Config.MaxIncomingStreams."},"title":"Using QUIC Streams"}}