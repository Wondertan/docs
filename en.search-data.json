{"/docs/":{"data":{"":"quic-go is an implementation of the QUIC protocol (RFC 9000, RFC 9001, RFC 9002) in Go. It has support for HTTP/3 (RFC 9114), including QPACK (RFC 9204).\nIn addition to these base RFCs, it also implements the following RFCs:\nUnreliable Datagram Extension (RFC 9221) Datagram Packetization Layer Path MTU Discovery (DPLPMTUD, RFC 8899) QUIC Version 2 (RFC 9369) QUIC Event Logging using qlog (draft-ietf-quic-qlog-main-schema and draft-ietf-quic-qlog-quic-events) Support for WebTransport over HTTP/3 (draft-ietf-webtrans-http3) is implemented in webtransport-go."},"title":"Docs"},"/docs/http3/":{"data":{"":"The http3 package implements HTTP/3 (RFC 9114), including QPACK (RFC 9204).\nIt aims to provide feature parity with the standard library‚Äôs HTTP/1.1 and HTTP/2 implementation."},"title":"HTTP/3"},"/docs/http3/client/":{"data":{"":"This package provides a http.RoundTripper implementation that can be used on the http.Client:\n\u0026http3.RoundTripper{ TLSClientConfig: \u0026tls.Config{}, // set a TLS client config, if desired QuicConfig: \u0026quic.Config{}, // QUIC connection options } defer roundTripper.Close() client := \u0026http.Client{ Transport: roundTripper, } The http3.RoundTripper provides a number of configuration options, please refer to the documentation for a complete list.\nTo use a custom quic.Transport, the function used to dial new QUIC connections can be configured:\ntr := quic.Transport{} roundTripper := \u0026http3.RoundTripper{ TLSClientConfig: \u0026tls.Config{}, // set a TLS client config, if desired QuicConfig: \u0026quic.Config{}, // QUIC connection options Dial: func(ctx context.Context, addr string, tlsConf *tls.Config, quicConf *quic.Config) (quic.EarlyConnection, error) { a, err := net.ResolveUDPAddr(\"udp\", addr) if err != nil { return nil, err } return tr.DialEarly(ctx, a, tlsConf, quicConf) }, } ","-future-work#üìù Future Work":" Support for zstd Content Encoding: #4100 qlog Support: #4124 Happy Eyeballs Support: #3755 Support for Extensible Priorities (RFC 9218): #3470 Support for HTTP Trailers: #2266 ","using-the-same-udp-socket-for-server-and-roundtripper#Using the same UDP Socket for Server and Roundtripper":"Since QUIC demultiplexes packets based on their connection IDs, it is possible allows running a QUIC server and client on the same UDP socket. This also works when using HTTP/3: HTTP requests can be sent from the same socket that a server is listening on.\nTo achieve this using this package, first initialize a single quic.Transport, and pass a quic.EarlyListner obtained from that transport to http3.Server.ServeListener, and use the DialEarly function of the transport as the Dial function for the http3.RoundTripper."},"title":"Dialing HTTP/3"},"/docs/http3/qpack/":{"data":{"":"HTTP/3 utilizes QPACK (RFC 9204) for efficient HTTP header field compression. Our implementation, available at quic-go/qpack, provides a minimal implementation of the protocol.","-future-work#üìù Future Work":" Add support for the QPACK dynamic table: #2424 and qpack#33 ","implementation-status#Implementation Status":"While the current implementation is a fully interoperable implementation of the QPACK protocol, it only uses the static compression table. The dynamic table would allow for more effective compression of frequently transmitted header fields. This can be particularly beneficial in scenarios where headers have considerable redundancy or in high-throughput environments.\nIf you think that your application would benefit from higher compression efficiency, or if you‚Äôre interested in contributing improvements here, please let us know in #2424."},"title":"HTTP Header Compression using QPACK"},"/docs/http3/server/":{"data":{"":"The easiest way to start an HTTP/3 server is using\nmux := http.NewServeMux() // ... add HTTP handlers to mux ... // If mux is nil, the http.DefaultServeMux is used. http3.ListenAndServeQUIC(\"0.0.0.0:443\", \"/path/to/cert\", \"/path/to/key\", mux) ListenAndServeQUIC is a convenience function. For more configurability, set up an http3.Server explicitly:\nserver := http3.Server{ Handler: mux, Addr: \"0.0.0.0:443\", TLSConfig: http3.ConfigureTLSConfig(\u0026tls.Config{}), // use your tls.Config here QuicConfig: \u0026quic.Config{}, } err := server.ListenAndServe() The http3.Server provides a number of configuration options, please refer to the documentation for a complete list. The QuicConfig is used to configure the underlying QUIC connection. More details can be found in the documentation of the QUIC package.\nIt is also possible to manually set up a quic.Transport, and then pass the listener to the server. This is useful when you want to set configuration options on the quic.Transport.\ntr := quic.Transport{Conn: conn} tlsConf := http3.ConfigureTLSConfig(\u0026tls.Config{}) // use your tls.Config here quicConf := \u0026quic.Config{} // QUIC connection options server := http3.Server{} ln, _ := tr.ListenEarly(tlsConf, quicConf) server.ServeListener(ln) Alternatively, it is also possible to pass fully established QUIC connections to the HTTP/3 server. This is useful if the QUIC server offers multiple ALPNs (via NextProtos in the tls.Config).\ntr := quic.Transport{Conn: conn} tlsConf := http3.ConfigureTLSConfig(\u0026tls.Config{}) // use your tls.Config here quicConf := \u0026quic.Config{} // QUIC connection options server := http3.Server{} // alternatively, use tr.ListenEarly to accept 0-RTT connections ln, _ := tr.Listen(tlsConf, quicConf) for { c, _ := ln.Accept() switch c.ConnectionState().TLS.NegotiatedProtocol { case http3.NextProtoH3: go server.ServeQUICConn(c) // ... handle other protocols ... } } ","-future-work#üìù Future Work":" Graceful shutdown: #153 Correctly deal with 0-RTT and HTTP/3 extensions: #3855 Support for Extensible Priorities (RFC 9218): #3470 Support for httptrace: #3342 Support for HTTP Trailers: #2266 "},"title":"Serving HTTP/3"},"/docs/quic/client/":{"data":{"":"Since QUIC uses connection IDs to demultiplex connections, multiple outgoing connections can share a single UDP socket.\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second) // 3s handshake timeout defer cancel() conn, err := tr.Dial(ctx, \u003cserver address\u003e, \u003ctls.Config\u003e, \u003cquic.Config\u003e) // ... error handling As a shortcut, quic.Dial and quic.DialAddr can be used without explictly initializing a quic.Transport:\nctx, cancel := context.WithTimeout(context.Background(), 3*time.Second) // 3s handshake timeout defer cancel() conn, err := quic.Dial(ctx, conn, \u003cserver address\u003e, \u003ctls.Config\u003e, \u003cquic.Config\u003e) Just as we saw before when used a similar shortcut to run a server, it‚Äôs also not possible to reuse the same UDP socket for other outgoing connections, or to listen for incoming connections."},"title":"Running a QUIC Client"},"/docs/quic/connection-migration/":{"data":{"":"Whereas TCP identifies connection by their 4-tuple (i.e. the combination of the client‚Äôs and server‚Äôs IP address and port), QUIC uses connection IDs to demultiplex connections. This allows QUIC connections to migrate between paths.\nThis can be useful when a mobile phone moves away from a WiFi networks, and wishes to use the cellular connection instead. Connection migration is completely transparent to the application, as the entire connection, including all streams, is migrated to the new path.\n‚ö†Ô∏è Note that this is not equivalent to multipath support. Using connection migration as defined in RFC 9000, only a single path can be used to send application at a time.\nSee Multipath for the QUIC Multipath extension.","-future-work#üìù Future Work":"quic-go currently doesn‚Äôt implement connection migration at this point.\nTracking Issue: #234 API Proposal: #3990 "},"title":"Connection Migration"},"/docs/quic/connection/":{"data":{"":"","when-the-remote-peer-closes-the-connection#When the Remote Peer closes the Connection":"In case the peer closes the QUIC connection, all calls to open streams, accept streams, as well as all methods on streams immediately return an error. Additionally, it is set as cancellation cause of the connection context. Users can use errors assertions to find out what exactly went wrong:\nquic.VersionNegotiationError: Happens during the handshake, if there is no overlap between our and the remote‚Äôs supported QUIC versions. quic.HandshakeTimeoutError: Happens if the QUIC handshake doesn‚Äôt complete within the time specified in quic.Config.HandshakeTimeout. quic.IdleTimeoutError: Happens after completion of the handshake if the connection is idle for longer than the minimum of both peers idle timeouts (as configured by quic.Config.IdleTimeout). The connection is considered idle when no stream data (and datagrams, if applicable) are exchanged for that period. The QUIC connection can be instructed to regularly send a packet to prevent a connection from going idle by setting quic.Config.KeepAlive. However, this is no guarantee that the peer doesn‚Äôt suddenly go away (e.g. by abruptly shutting down the node or by crashing), or by a NAT binding expiring, in which case this error might still occur. quic.StatelessResetError: Happens when the remote peer lost the state required to decrypt the packet. This requires the quic.Transport.StatelessResetToken to be configured by the peer. quic.TransportError: Happens if when the QUIC protocol is violated. Unless the error code is APPLICATION_ERROR, this will not happen unless one of the QUIC stacks involved is misbehaving. Please open an issue if you encounter this error. quic.ApplicationError: Happens when the remote decides to close the connection, see below. ","when-we-close-the-connection#When we close the Connection":"A quic.Connection can be closed using CloseWithError:\nconn.CloseWithError(0x42, \"error 0x42 occurred\") Applications can transmit both an error code (an unsigned 62-bit number) as well as a UTF-8 encoded human-readable reason. The error code allows the receiver to learn why the connection was closed, and the reason can be useful for debugging purposes.\nOn the receiver side, this is surfaced as a quic.ApplicationError."},"title":"Closing a Connection"},"/docs/quic/datagrams/":{"data":{"":"","-future-work#üìù Future Work":" general performance improvements in the DATAGRAM send and receive path introduce an API to query the current DATAGRAM size limit: #4259 notify the application when a DATAGRAM frame is acked / lost: #4273 ","sending-and-receiving-datagrams#Sending and Receiving Datagrams":"Datagrams are sent using the SendDatagram method on the quic.Connection:\nconn.SendDatagram([]byte(\"foobar\")) And received using ReceiveDatagram:\nmsg, err := conn.ReceiveDatagram(context.Background()) Note that this code path is currently not optimized. It works for datagrams that are sent occasionally, but it doesn‚Äôt achieve the same throughput as writing data on a stream. Please get in touch on issue #3766 if your use case relies on high datagram throughput, or if you‚Äôd like to help fix this issue.","the-unreliable-datagram-extension#The Unreliable Datagram Extension":"Unreliable datagrams are not part of QUIC (RFC 9000) itself, but a feature that is added by a QUIC extension (RFC 9221). As other extensions, it can be negotiated during the handshake. Support can be enabled by setting the quic.Config.EnableDatagram flag. Note that this doesn‚Äôt guarantee that the peer also supports datagrams. Whether or not the feature negotiation succeeded can be learned from the ConnectionState.SupportsDatagrams obtained from Connection.ConnectionState().\nQUIC DATAGRAMs are a new QUIC frame type sent in QUIC 1-RTT packets (i.e. after completion of the handshake). Therefore, they‚Äôre end-to-end encrypted and congestion-controlled. However, if a DATAGRAM frame is deemed lost by QUIC‚Äôs loss detection mechanism, they are not retransmitted."},"title":"Datagrams"},"/docs/quic/metrics/":{"data":{"":"It would be nice if it was easier to monitor quic-go internals using Prometheus. Currently this is not yet possible. Work on Prometheus integration is tracked in #4077."},"title":"Prometheus Metrics"},"/docs/quic/multipath/":{"data":{"":"Multipath QUIC is a QUIC extension currently under development in the IETF QUIC working group. It allows the simultaneous use of multiple path for transferring application data.\nThe implementation status in quic-go is tracked in #3343."},"title":"Multipath"},"/docs/quic/optimizations/":{"data":{"":"","gso#Generic Segmentation Offload (GSO)":"Generic Segmentation Offload (GSO) net.UDPConn.WriteMsgUDP sends a single UDP packet. Under the hood, the standard library uses the sendmsg syscall. In principle, this is all we need to make QUIC work. However, for high-troughput transfers, the cost of these syscalls adds up.\nGeneric Segmentation Offload (GSO) allows applications to pass a large (up to 64 kB) buffer to the kernel, and have the kernel chop this buffer up into smaller pieces. This comes with a few requirements: all packets are sent to the same receiver address, and all packets except the last one need to have exactly the same size. quic-go handles all this complexity, and is able to optimize the creation of new packets by creating them in GSO-sized batched.\nGSO is currently only available on Linux for kernel versions from 4.18. On certain systems, GSO might still fail, which is why quic-go comes with GSO detection logic, and falls back to the non-GSO send path if GSO doesn‚Äôt properly work.\nThere is no config flag to disable GSO support, and it is not expected that users would ever want to disable GSO support. If you run into any GSO-related problem, please open an issue. It is however possible to globally disable GSO by setting the QUIC_GO_DISABLE_GSO environment variable to true.\nüìù Future Work GSO on Windows: #4325 amortize header protection cost by batching: #4371 ","path-mtu-discovery-dplpmtud#Path MTU Discovery (DPLPMTUD)":"RFC 9000 requires any QUIC path to support MTUs of at least 1200 bytes, but many paths on the internet support larger MTUs, some up to 1500 bytes. On some path, even larger MTUs are possible.\nDatagram Packetization Layer Path MTU Discovery (DPLPMTUD) allows a QUIC endpoint to determine the MTU available on a given path, and therefore increase the size of QUIC packets it sends. This is advantageus since there is a per-packet overhead: QUIC packet encryption, QUIC header protection, framing overhead, etc.\nDPLPMTUD is enabled by default. If desired, it can be disabled on a per-connection basis using the quic.Config:\nquic.Config{ DisablePathMTUDiscovery: false, } DPLPMTUD works by occasionally sending larger ‚Äúprobe packets‚Äù. If these packets are received and acknowledged, this confirms that the network path is capable of handling higher MTUs, and allows quic-go to increase the size of packets sent out. In terms of bandwidth consumption, DPLPMTUD is exceedingly cheap: over the lifetime of a connection, less than 10 probe packets are sent.\nüìù Future Work Handle decreasing MTUs: #3955 Make the maximum packet size configurable: #3385 ","udp-buffer-sizes#UDP Buffer Sizes":"Experiments have shown that QUIC transfers on high-bandwidth connections can be limited by the size of the UDP receive and send buffer. The receive buffer holds packets that have been received by the kernel, but not yet read by the application (quic-go in this case). The send buffer holds packets that have been sent by quic-go, but not sent out by the kernel. In both cases, once these buffers fill up, the kernel will drop any new incoming packet.\nTherefore, quic-go tries to increase the buffer size. The way to do this is OS-specific, and we currently have an implementation for Linux, Windows and macOS. However, an application is only allowed to do increase the buffer size up to a maximum value set in the kernel. Unfortunately, on Linux this value is rather small, too small for high-bandwidth QUIC transfers.\nnon-BSD It is recommended to increase the maximum buffer size by running:\nsysctl -w net.core.rmem_max=2500000 sysctl -w net.core.wmem_max=2500000 This command would increase the maximum send and the receive buffer size to roughly 2.5 MB. Note that these settings are not persisted across reboots.\nBSD Taken from: https://medium.com/@CameronSparr/increase-os-udp-buffers-to-improve-performance-51d167bb1360\nOn BSD/Darwin systems you need to add about a 15% padding to the kernel limit socket buffer. Meaning if you want a 25MB buffer (8388608 bytes) you need to set the kernel limit to 26214400*1.15 = 30146560. This is not documented anywhere but happens in the kernel here.\nTo update the value immediately to 2.5M, type the following commands as root:\nsysctl -w kern.ipc.maxsockbuf=3014656 Add the following lines to the /etc/sysctl.conf file to keep this setting across reboots:\nkern.ipc.maxsockbuf=3014656 üìù Open Questions Setting UDP buffer sizes when using Docker: #3801 Setting UDP buffer sizes on OpenBSD: #3476 "},"title":"Optimizations"},"/docs/quic/qlog/":{"data":{"":"quic-go logs a wide range of events defined in draft-ietf-quic-qlog-quic-events, providing comprehensive insights in the internals of a QUIC connection.\nqlog files can be processed by a number of 3rd-party tools. qviz has proven very useful for debugging all kinds of QUIC connection failures.","-future-work#üìù Future Work":" qlog support for HTTP/3: #4124 move to a different JSON serializer: #3373 ","events-associated-with-a-connection#Events associated with a Connection":"qlog can be activated by setting the Tracer callback on the Config. It is called as soon as quic-go decides to start the QUIC handshake for a new connection. qlog.DefaultTracer provides a tracer implementation which writes qlog files to a directory specified by the QLOGDIR environment variable, if set. The default qlog tracer can be used like this:\nquic.Config{ Tracer: qlog.DefaultTracer, } For more sophisticated use cases, applications can implement the callback:\nquic.Config{ Tracer: func( ctx context.Context, p logging.Perspective, connID quic.ConnectionID, ) *logging.ConnectionTracer { // application-defined logic } } The context.Context passed to this callback is never closed, but it carries a quic.ConnectionTracingKey value. This value is also set on the context returned from Connection.Context.\nIt is valid to return nil for the *logging.ConnectionTracer from this callback. In this case, qlogging will be disabled for this connection.","events-not-associated-with-a-connection#Events not associated with a Connection":"When listening for QUIC packets on a UDP socket, there are a couple of events that can happen before an incoming packet can be associated with a QUIC connection. For example, the QUIC packet header might be invalid, forcing us to drop the packet. Or the server might be overloaded and reject a new connection attempt.\nqlogging for these events can be enabled by configuring a Tracer on the Transport:\nf, err := os.Create(\"events.qlog\") // ... error handling quic.Transport{ Tracer: qlog.NewTracer(f), } "},"title":"Event Logging using qlog"},"/docs/quic/server/":{"data":{"":"","certificate-size-considerations#Certificate Size Considerations":"During the initial phase of the QUIC handshake, before validating the client‚Äôs address, server response size is restricted to thrice the bytes received from the client, as outlined in RFC 9000, Section 8. This limitation helps prevent the use of QUIC servers in DDoS attack amplifications by ensuring a server cannot send an excessively large response to a potentially spoofed packet.\nGiven that the initial client packet is typically 1200 bytes, the server‚Äôs response is capped at 3600 bytes. This cap includes the server‚Äôs TLS certificate in its first response, and an oversized certificate can extend the handshake by an additional RTT. As large certificates are commonplace, optimizing the certificate chain‚Äôs size is advisable to avoid handshake delays, supported by insights from Fastly‚Äôs research.","using-a-quictransport#Using a \u003ccode\u003equic.Transport\u003c/code\u003e":"Using a quic.Transport The central entry point is the quic.Transport. A Transport manages all QUIC connections running on a single UDP socket. Since QUIC uses Connection IDs, it can demultiplex a listener (accepting incoming connections) and an arbitrary number of outgoing QUIC connections on the same UDP socket.\nudpConn, err := net.ListenUDP(\"udp4\", \u0026net.UDPAddr{Port: 1234}) // ... error handling tr := quic.Transport{ Conn: udpConn, } ln, err := tr.Listen(tlsConf, quicConf) // ... error handling go func() { for { conn, err := ln.Accept() // ... error handling // handle the connection, usually in a new Go routine } }() The listener ln can now be used to accept incoming QUIC connections by (repeatedly) calling the Accept method (see below for more information on the quic.Connection).\nThis listener can be closed independently from the underlying transport. Connections that are already established and accepted won‚Äôt be affected, but clients won‚Äôt be able to establish new connections.","using-the-convenience-functions#Using the Convenience Functions":"As a shortcut, quic.Listen and quic.ListenAddr can be used without explicitly initializing a quic.Transport:\nln, err := quic.Listen(udpConn, tlsConf, quicConf) When using the shortcut, it‚Äôs not possible to reuse the same UDP socket for outgoing connections.\n‚ö†Ô∏è While closing the listener associated with a Transport doesn‚Äôt close QUIC connections accepted from this listener, closing a listener created using these shortcuts causes all accepted connections to be immediately terminated. "},"title":"Running a QUIC Server"},"/docs/quic/streams/":{"data":{"":"","accepting-streams#Accepting Streams":"QUIC is a stream-multiplexed transport. A quic.Connection fundamentally differs from the net.Conn and the net.PacketConn interface defined in the standard library. Data is sent and received on (unidirectional and bidirectional) streams (and, if supported, in datagrams), not on the connection itself. The stream state machine is described in detail in Section 3 of RFC 9000.\nNote: A unidirectional stream is a stream that the initiator can only write to (quic.SendStream), and the receiver can only read from (quic.ReceiveStream). A bidirectional stream (quic.Stream) allows reading from and writing to for both sides.\nOn the receiver side, streams are accepted using the AcceptStream (for bidirectional) and AcceptUniStream functions. For most user cases, it makes sense to call these functions in a loop:\nfor { str, err := conn.AcceptStream(context.Background()) // for bidirectional streams // ... error handling // handle the stream, usually in a new Go routine } These functions return an error when the underlying QUIC connection is closed.","opening-streams#Opening Streams":"There are two slightly different ways to open streams, one synchronous and one (potentially) asynchronous. This API is necessary since the receiver grants us a certain number of streams that we‚Äôre allowed to open. It may grant us additional streams later on (typically when existing streams are closed), but it means that at the time we want to open a new stream, we might not be able to do so.\nUsing the synchronous method OpenStreamSync for bidirectional streams, and OpenUniStreamSync for unidirectional streams, an application can block until the peer allows opening additional streams. In case that we‚Äôre allowed to open a new stream, these methods return right away:\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second) defer cancel() str, err := conn.OpenStreamSync(ctx) // wait up to 5s to open a new bidirectional stream The asynchronous version never blocks. If it‚Äôs currently not possible to open a new stream, it returns a net.Error timeout error:\nstr, err := conn.OpenStream() if nerr, ok := err.(net.Error); ok \u0026\u0026 nerr.Timeout() { // It's currently not possible to open another stream, // but it might be possible later, once the peer allowed us to do so. } These functions return an error when the underlying QUIC connection is closed.","reading-writing-closing-and-resetting#Reading, Writing, Closing and Resetting":"Using QUIC streams is pretty straightforward. The quic.ReceiveStream implements the io.Reader interface, and the quic.SendStream implements the io.Writer interface. A bidirectional stream (quic.Stream) implements both these interfaces. Conceptually, a bidirectional stream can be thought of as the composition of two unidirectional streams in opposite directions.\nCalling Close on a quic.SendStream or a quic.Stream closes the send side of the stream. On the receiver side, this will be surfaced as an io.EOF returned from the io.Reader once all data has been consumed. Note that for bidirectional streams, Close only closes the send side of the stream. It is still possible to read from the stream until the peer closes or resets the stream.\nIn case the application wishes to abort sending on a quic.SendStream or a quic.Stream , it can reset the send side by calling CancelWrite with an application-defined error code (an unsigned 62-bit number). On the receiver side, this surfaced as a quic.StreamError containing that error code on the io.Reader. Note that for bidirectional streams, CancelWrite only resets the send side of the stream. It is still possible to read from the stream until the peer closes or resets the stream.\nConversely, in case the application wishes to abort receiving from a quic.ReceiveStream or a quic.Stream, it can ask the sender to abort data transmission by calling CancelRead with an application-defined error code (an unsigned 62-bit number). On the receiver side, this surfaced as a quic.StreamError containing that error code on the io.Writer. Note that for bidirectional streams, CancelWrite only resets the receive side of the stream. It is still possible to write to the stream.\nA bidirectional stream is only closed once both the read and the write side of the stream have been either closed or reset. Only then the peer is granted a new stream according to the maximum number of concurrent streams configured via quic.Config.MaxIncomingStreams."},"title":"Using QUIC Streams"},"/docs/quic/transport/":{"data":{"":"","handling-non-quic-packets#Handling non-QUIC packets":"QUIC was designed to be demultiplexed with a number of common UDP-based protocols (see RFC 9443 for details). This is achieved by inspecting the first few bits of every incoming UDP packet.\ntr.ReadNonQUICPacket(ctx context.Context, b []byte) (int, net.Addr, error) Using the ReadNonQUICPacket method is preferable over implementation this inspection logic outside of quic-go, and passing a wrapped net.PacketConn to the Transport, as it allows quic-go to use a number of kernel-based optimization (e.g. GSO) that massively speed up QUIC transfers (see Optimizations).","initializing-a-transport#Initializing a Transport":"","using-a-netpacketconn-thats-not-a-netudpconn#Using a \u003ccode\u003enet.PacketConn\u003c/code\u003e that\u0026rsquo;s not a \u003ccode\u003e*net.UDPConn\u003c/code\u003e":"Initializing a Transport The central entrypoint into quic-go is the quic.Transport. It used both when running a QUIC server and when dialing QUIC connections.\nOther than TCP, which identifies connections by their 4-tuple (i.e. the combination of the client‚Äôs and server‚Äôs IP address and port), QUIC uses connection IDs to demultiplex connections. That means that an arbitrary number of QUIC connections can be run on the same UDP socket. It is even possible to run a server (accepting incoming connections) and clients (establishing outgoing connections) on the socket.\nThe following code creates a new quic.Transport that uses UDP port 6121 on all available interfaces.\naddr, err := net.ResolveUDPAddr(\"udp\", \"0.0.0.0:6121\") // ... error handling conn, err := net.ListenUDP(\"udp\", addr) // ... error handling tr := \u0026quic.Transport{ Conn: conn, } As a rule of thumb, it is only necessary to create separate quic.Transports when listening on multiple UPD ports, or when binding sockets to different network interfaces.\n‚ö†Ô∏è Keep in mind that to achieve decent transfer performance, you might need to increase the kernel‚Äôs UDP send and receive buffer size. Using a net.PacketConn that‚Äôs not a *net.UDPConn Transport.Conn is a net.PacketConn, allowing applications to use their own implementation of the net.PacketConn interface. With this, it is possible to do QUIC over transports other than UDP.\nHowever, if the net.PacketConn is indeed a wrapped *net.UDPConn, this could prevent quic-go from accessing kernel-based optimizations, leading to reduced transfer performance. For example, using ECN is only possible if the packets sent are actual UDP packets.\nApplications can test if their net.PacketConn implementation provides the required methods to enable these optimizations by using the OOBCapablePacketConn interface:\ntype myPacketConn struct{} var _ quic.OOBCapablePacketConn = \u0026myPacketConn{} "},"title":"Transport"},"/docs/webtransport/":{"data":{"":"In the future, we will add documentation for webtransport-go here."},"title":"WebTransport"}}